Locally
=======

https://ubuntu.com/kubernetes/install
 - Single node with MicroK8s - https://ubuntu.com/kubernetes/install#single-node

sudo snap info microk8s

microk8s.status


microk8s.kubectl

If you would like to use the MicroK8s kubectl and .kubeconfig file locally, you can do the following:

sudo snap alias microk8s.kubectl kubectl
microk8s.kubectl config view --raw > $HOME/.kube/config


https://microk8s.io/#get-started

sudo microk8s enable dns dashboard registry

sudo kubectl get all --all-namespaces

d023975@d023975-HP-xw4400-Workstation:~$ sudo kubectl get no

https://microk8s.io/docs

To install the latest stable version, simply run:

d023975@d023975-HP-xw4400-Workstation:~$ sudo snap install microk8s --classic
microk8s (1.18/stable) v1.18.3 from Canonical✓ installed


To add your current user to the group and gain access to the .kube caching directory, run the following two commands: 
sudo usermod -a -G microk8s $USER
sudo chown -f -R $USER ~/.kube


re-enter the session for the group update to take place:

su - $USER


Check the status

microk8s status --wait-ready


Access Kubernetes

view you node:
microk8s kubectl get nodes

see the running services:
microk8s kubectl get services

Add an alias (append to ~/.bash_aliases) like this:
alias kubectl='microk8s kubectl'


Deploy an app
Try installing a demo app:

microk8s kubectl create deployment

Check the status:

microk8s kubectl get pods


Use add-ons
microk8s enable dns storage
https://microk8s.io/docs/addons


Starting and Stopping MicroK8s
microk8s stop
microk8s start


https://microk8s.io/docs/clustering
microk8s add-node
microk8s join ip-172-31-20-243:25000/DDOkUupkmaBezNnMheTBqFYHLWINGDbf
microk8s kubectl get no
microk8s remove-node 10.22.254.79
microk8s leave


https://microk8s.io/docs/addons
microk8s enable dns
microk8s disable dns
microk8s status





Azure
=====
https://ubuntu.com/kubernetes/install#multi-node

https://azure.microsoft.com/en-us/services/kubernetes-service/
https://azure.microsoft.com/en-us/services/container-registry/

[
https://docs.microsoft.com/en-us/azure/container-registry/
https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-docker-cli
]


------------------------------
Insgesamt besteht ein Kubernetes Cluster vereinfacht betrachtet aus folgenden Kompo-
nenten:

API-Server
Der Application Programming Interface (API)-Server ist die zentrale Administrati-
onskomponente zur Verwaltung der Clusterobjekte. Dabei nimmt er alle Anfragen
an, die beispielsweise mittels der kubectl-CLI oder anderer Graphical User Inter-
face (GUI)-Lösungen an die REST-API des Servers gesendet wurden. Anschließend
validiert und verarbeitet er diese. Zudem beinhaltet er alle Definitionen der Kuber-
netes Objekte und stellt diese bereit. 
 
Controller Manager
Der Controller Manager übernimmt clusterweite Aufgaben, wie beispielsweise die
Sicherstellung der definierten Anzahl an replizierten Pods, die Überwachung der
Worker Nodes, sowie Gegenmaßnahmen bei einem Ausfall eines Knotens. 
 
Scheduler
Der Scheduler ist zuständig für die Zuweisung der Pod-Instanzen auf die Worker Nodes.
Hierbei versucht er die aktuellen Workloads der Worker Nodes mittels deren freien
Ressourcenkapazitäten zu optimieren.

etcd
Der zentrale Key-Value Store etcd dient der persistenten Sicherung der Clusterkon-
figurationen und des aktuellen Zustandes des API-Servers.

kubelet
Der kubelet-Service fungiert als Kommunikations- und Steuerungsschnittstelle der
Worker Nodes für den API-Server. Dabei sorgt er für die Bereitstellung der Kubernetes-
Objekte in der lokalen Container-Runtime, wie beispielsweise Docker.  

kube-proxy
Der Kube-Proxy kümmert sich um die “Clusterweite, interne Bereitstellung von Ser-
vices [. . . ] und um die Annahmen und Weiterleitung von der Außenwelt eingehender
Requests“.

see kubernetes.png

https://github.com/gardener






























